"use strict";(self.webpackChunk_mapcomponents_react_maplibre=self.webpackChunk_mapcomponents_react_maplibre||[]).push([[6903],{51068:(e,r,n)=>{n.r(r),n.d(r,{RemoveSourceExample:()=>x,UseGeojsonSourceExample:()=>h,UseRasterSourceExample:()=>j,UseVectorSourceExample:()=>I,__namedExportsOrder:()=>w,default:()=>b});var o=n(90175),t=n(96540),a=n(40554),s=n(4725),i=n(64365),c=n(61102),p=n(61224),u=n(12682),l=n(51253);const m=JSON.parse('{"type":"Feature","geometry":{"type":"Point","coordinates":[7.0851268,50.73884],"properties":{"title":"Bonn"}}}');var d=n(74848);function y(e){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},y(e)}function f(e,r){return function(e){if(Array.isArray(e))return e}(e)||function(e,r){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var o,t,a,s,i=[],c=!0,p=!1;try{if(a=(n=n.call(e)).next,0===r){if(Object(n)!==n)return;c=!1}else for(;!(c=(o=a.call(n)).done)&&(i.push(o.value),i.length!==r);c=!0);}catch(e){p=!0,t=e}finally{try{if(!c&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(p)throw t}}return i}}(e,r)||function(e,r){if(e){if("string"==typeof e)return g(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?g(e,r):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(e,r){(null==r||r>e.length)&&(r=e.length);for(var n=0,o=new Array(r);n<r;n++)o[n]=e[n];return o}function v(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function S(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?v(Object(n),!0).forEach((function(r){var o,t,a,s;o=e,t=r,a=n[r],s=function(e,r){if("object"!=y(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!=y(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(t),(t="symbol"==y(s)?s:String(s))in o?Object.defineProperty(o,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):o[t]=a})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}const b={title:"Hooks/useSource",component:o.A,argTypes:{},decorators:l.A};var h=function(e){var r=(0,o.A)(S({},e)).source;return(0,i.A)({mapId:e.mapId,layerId:"layer1",options:{source:null!=r&&r.id?r.id:"",type:"circle",paint:{"circle-radius":6,"circle-color":"red"}}}),(0,i.A)({mapId:e.mapId,layerId:"layer2",options:{source:null!=r&&r.id?r.id:"",type:"circle",paint:{"circle-radius":4,"circle-color":"green"}}}),(0,d.jsx)(d.Fragment,{})}.bind({});h.args={mapId:"map_1",sourceId:"geojson-source",source:{type:"geojson",data:m}};var I=function(e){(0,o.A)(S({},e));var r=(0,a.A)({mapId:e.mapId});return(0,t.useEffect)((function(){r.map&&(r.map.addLayer({id:"vector-lineLayer",type:"line",source:e.sourceId,minzoom:0,maxzoom:22,"source-layer":"landuse",layout:{"line-cap":"round","line-join":"round"},paint:{"line-width":2,"line-color":"#ff0000"}},!1,r.componentId),r.map.addLayer({id:"vector-FillLayer",type:"fill",source:e.sourceId,minzoom:0,maxzoom:22,"source-layer":"landuse",paint:{"fill-color":"#32a850","fill-opacity":.4}},!1,r.componentId))}),[r.map]),(0,d.jsx)(d.Fragment,{})}.bind({});I.args={mapId:"map_1",sourceId:"vector-source",source:{type:"vector",tiles:["https://wms.wheregroup.com/tileserver/tile/tileserver.php?/europe-0-14/index.json?/europe-0-14/{z}/{x}/{y}.pbf"],tilesize:512,attribution:""}};var j=function(e){(0,o.A)(S({},e));var r=(0,a.A)({mapId:e.mapId});return(0,t.useEffect)((function(){r.map&&r.map.addLayer({id:"raster-wms",type:"raster",source:e.sourceId,minzoom:0,maxzoom:22},!1,r.componentId)}),[r.map]),(0,d.jsx)(d.Fragment,{})}.bind({});j.args={mapId:"map_1",sourceId:"raster-source",source:{type:"raster",tiles:["https://www.wms.nrw.de/geobasis/wms_nw_uraufnahme?bbox={bbox-epsg-3857}&format=image/png&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857&width=256&height=256&styles=&layers=nw_uraufnahme_rw"],tilesize:256,attribution:""}};var x=function(e){var r=f((0,t.useState)(!0),2),n=r[0],o=r[1],i=f((0,t.useState)([]),2),l=i[0],m=i[1],y=(0,a.A)({mapId:e.mapId}),g=(0,s.A)({mapId:e.mapId,watch:{viewport:!1,layers:!0,sources:!0},filter:{includeBaseLayers:!1}});return(0,t.useEffect)((function(){y.map&&y.map.map.on("sourcedata",(function(){var e,r;null!=y&&null!==(e=y.map)&&void 0!==e&&null!==(e=e.map)&&void 0!==e&&e.style.sourceCaches&&m(Object.keys(null==y||null===(r=y.map)||void 0===r||null===(r=r.map)||void 0===r?void 0:r.style.sourceCaches))}))}),[y.map]),(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(c.A,{buttons:(0,d.jsx)(p.A,{color:"primary",variant:n?"contained":"outlined",onClick:function(){return o(!n)},children:"Ml GeoJsonLayer With Source JSX Active?"})}),n&&(0,d.jsx)(u.A,{}),(0,d.jsx)("div",{style:{position:"fixed",zIndex:1290,display:"flex",flexWrap:"wrap",top:"62px",left:0,right:0,bottom:0,maxHeight:"100VH",backgroundColor:"rgba(80,80,80,.8)",padding:"50px",fontSize:"20px",color:"#51ff09",overflow:"hidden",pointerEvents:"none"},children:(null==l?void 0:l.length)>0&&(0,d.jsxs)("div",{children:["Active sources: ",(0,d.jsx)("br",{})," ",JSON.stringify(l,null,"  "),(0,d.jsx)("br",{})," ",(0,d.jsx)("br",{})," Active layers : ",(0,d.jsx)("pre",{children:JSON.stringify(g,null,"  ")})]})})]})}.bind({});x.args={mapId:"map_1"},h.parameters={...h.parameters,docs:{...h.parameters?.docs,source:{originalSource:"(args: any) => {\n  const {\n    source\n  } = useSource({\n    ...args\n  });\n  useLayer({\n    mapId: args.mapId,\n    layerId: 'layer1',\n    options: {\n      source: source?.id ? source.id : '',\n      type: 'circle',\n      paint: {\n        'circle-radius': 6,\n        'circle-color': 'red'\n      }\n    }\n  });\n  useLayer({\n    mapId: args.mapId,\n    layerId: 'layer2',\n    options: {\n      source: source?.id ? source.id : '',\n      type: 'circle',\n      paint: {\n        'circle-radius': 4,\n        'circle-color': 'green'\n      }\n    }\n  });\n  return <></>;\n}",...h.parameters?.docs?.source}}},I.parameters={...I.parameters,docs:{...I.parameters?.docs,source:{originalSource:"(args: any) => {\n  useSource({\n    ...args\n  });\n  const mapHook = useMap({\n    mapId: args.mapId\n  });\n  useEffect(() => {\n    if (!mapHook.map) return;\n    mapHook.map.addLayer({\n      id: 'vector-lineLayer',\n      type: 'line',\n      source: args.sourceId,\n      minzoom: 0,\n      maxzoom: 22,\n      'source-layer': 'landuse',\n      layout: {\n        'line-cap': 'round',\n        'line-join': 'round'\n      },\n      paint: {\n        'line-width': 2,\n        'line-color': '#ff0000'\n      }\n    }, false, mapHook.componentId);\n    mapHook.map.addLayer({\n      id: 'vector-FillLayer',\n      type: 'fill',\n      source: args.sourceId,\n      minzoom: 0,\n      maxzoom: 22,\n      'source-layer': 'landuse',\n      paint: {\n        'fill-color': '#32a850',\n        'fill-opacity': 0.4\n      }\n    }, false, mapHook.componentId);\n  }, [mapHook.map]);\n  return <></>;\n}",...I.parameters?.docs?.source}}},j.parameters={...j.parameters,docs:{...j.parameters?.docs,source:{originalSource:"(args: any) => {\n  useSource({\n    ...args\n  });\n  const mapHook = useMap({\n    mapId: args.mapId\n  });\n  useEffect(() => {\n    if (!mapHook.map) return;\n    mapHook.map.addLayer({\n      id: 'raster-wms',\n      type: 'raster',\n      source: args.sourceId,\n      minzoom: 0,\n      maxzoom: 22\n    }, false, mapHook.componentId);\n  }, [mapHook.map]);\n  return <></>;\n}",...j.parameters?.docs?.source}}},x.parameters={...x.parameters,docs:{...x.parameters?.docs,source:{originalSource:"(args: any) => {\n  const [sourceStatus, setSourceStatus] = useState(true);\n  const [activeSources, setActiveSources] = useState<string[]>([]);\n  const mapHook = useMap({\n    mapId: args.mapId\n  });\n  const mapState = useMapState({\n    mapId: args.mapId,\n    watch: {\n      viewport: false,\n      layers: true,\n      sources: true\n    },\n    filter: {\n      includeBaseLayers: false\n    }\n  });\n  useEffect(() => {\n    if (!mapHook.map) {\n      return;\n    }\n    mapHook.map.map.on('sourcedata', () => {\n      if (mapHook?.map?.map?.style.sourceCaches) {\n        setActiveSources(Object.keys(mapHook?.map?.map?.style.sourceCaches));\n      }\n    });\n  }, [mapHook.map]);\n  return <>\n            <TopToolbar buttons={<Button color=\"primary\" variant={sourceStatus ? 'contained' : 'outlined'} onClick={() => setSourceStatus(!sourceStatus)}>\n                        Ml GeoJsonLayer With Source JSX Active?\n                    </Button>} />\n            {sourceStatus && <MlGeojsonLayerWithSource></MlGeojsonLayerWithSource>}\n            <div style={{\n      position: 'fixed',\n      zIndex: 1290,\n      display: 'flex',\n      flexWrap: 'wrap',\n      top: '62px',\n      left: 0,\n      right: 0,\n      bottom: 0,\n      maxHeight: '100VH',\n      backgroundColor: 'rgba(80,80,80,.8)',\n      padding: '50px',\n      fontSize: '20px',\n      color: '#51ff09',\n      overflow: 'hidden',\n      pointerEvents: 'none'\n    }}>\n                {activeSources?.length > 0 && <div>\n                        Active sources: <br></br> {JSON.stringify(activeSources, null, '  ')}\n                        <br></br> <br></br> Active layers : {}\n                        <pre>{JSON.stringify(mapState, null, '  ')}</pre>\n                    </div>}\n            </div>\n        </>;\n}",...x.parameters?.docs?.source}}};const w=["UseGeojsonSourceExample","UseVectorSourceExample","UseRasterSourceExample","RemoveSourceExample"]},12682:(e,r,n)=>{n.d(r,{A:()=>p});var o=n(96540),t=n(40554),a=n(64365),s=n(90175),i=n(74848),c=function(e){var r=(0,t.A)({mapId:e.mapId,waitForLayer:e.insertBeforeLayer}),n=(0,o.useRef)(!1),c="geojson-source-island";return(0,s.A)({mapId:e.mapId,sourceId:c,source:{type:"geojson",data:{type:"Feature",properties:{},geometry:{type:"Polygon",coordinates:[[[7.678070068359375,53.77276133960687],[7.665367126464845,53.76190478322587],[7.66794204711914,53.75439486837337],[7.682018280029297,53.75104541932613],[7.683563232421874,53.752567929273795],[7.6895713806152335,53.75784553654847],[7.694721221923828,53.765253366367],[7.697296142578124,53.76555776977467],[7.696952819824219,53.76190478322587],[7.702102661132812,53.7634268995759],[7.74038314819336,53.760179651329416],[7.7458763122558585,53.7626151110553],[7.76956558227539,53.76413720165758],[7.796001434326172,53.77002209954434],[7.801666259765624,53.77113810781356],[7.801666259765624,53.77235553754314],[7.806129455566406,53.77306568858016],[7.815742492675781,53.775703287246394],[7.819690704345703,53.77752921999979],[7.81951904296875,53.77955794100295],[7.8172874450683585,53.78026797018521],[7.785530090332031,53.780166538180396],[7.756175994873047,53.78067369575275],[7.754802703857421,53.7819922767562],[7.7398681640625,53.78189084891923],[7.725791931152345,53.78168799250984],[7.71686553955078,53.77986224069494],[7.709827423095702,53.78087655706549],[7.695751190185547,53.78036940194483],[7.687854766845703,53.778340720169446],[7.678070068359375,53.77276133960687]]]}}}}),(0,a.A)({mapId:e.mapId,layerId:"Spiekeroog-area",options:{id:"layer1",source:c,type:"fill",paint:{"fill-color":"green","fill-opacity":.5}}}),(0,a.A)({mapId:e.mapId,layerId:"Spiekeroog-points",options:{id:"Spiekeroog-points",source:c,type:"circle",paint:{"circle-radius":4,"circle-color":"green"}}}),(0,o.useEffect)((function(){r.map&&!n.current&&(n.current=!0,r.map.map.setCenter([7.7388381958,53.7732685866]),r.map.map.setZoom(11))}),[r.map,e.mapId]),(0,i.jsx)(i.Fragment,{})};c.defaultProps={mapId:"map_1"};const p=c;try{c.displayName="MlGeojsonLayerWithSource",c.__docgenInfo={description:"MlGeojsonLayerWithSource",displayName:"MlGeojsonLayerWithSource",props:{mapId:{defaultValue:{value:"map_1"},description:"Id of the target MapLibre instance in mapContext",name:"mapId",required:!1,type:{name:"string | undefined"}},insertBeforeLayer:{defaultValue:null,description:'Id of an existing layer in the mapLibre instance to help specify the layer order\nThis layer will be visually beneath the layer with the "insertBeforeLayer" id.',name:"insertBeforeLayer",required:!1,type:{name:"string | undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/MlGeojsonLayerWithSource/MlGeojsonLayerWithSource.tsx#MlGeojsonLayerWithSource"]={docgenInfo:c.__docgenInfo,name:"MlGeojsonLayerWithSource",path:"src/components/MlGeojsonLayerWithSource/MlGeojsonLayerWithSource.tsx#MlGeojsonLayerWithSource"})}catch(e){}},51253:(e,r,n)=>{n.d(r,{A:()=>u});var o=n(96540),t=n(95532),a=n(32348),s=(n(18582),n(68704)),i=n(70008),c=n(30901),p=n(74848);const u=[function(e,r){var n,u=(0,o.useMemo)((function(){var e;return(0,c.A)(null==r||null===(e=r.globals)||void 0===e?void 0:e.theme)}),[null==r||null===(n=r.globals)||void 0===n?void 0:n.theme]);return(0,p.jsx)("div",{className:"fullscreen_map",children:(0,p.jsx)(t.mO,{children:(0,p.jsxs)(i.A,{theme:u,children:[(0,p.jsx)(e,{}),(0,p.jsx)(a.A,{options:{zoom:14.5,style:"https://wms.wheregroup.com/tileserver/style/osm-bright.json",center:[7.0851268,50.73884]},mapId:"map_1"}),(0,p.jsx)(s.A,{showZoomButtons:!1,mapId:"map_1"})]})})})}]}}]);