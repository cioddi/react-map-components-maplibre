"use strict";(self.webpackChunk_mapcomponents_react_maplibre=self.webpackChunk_mapcomponents_react_maplibre||[]).push([[7848],{23118:(e,t,n)=>{n.r(t),n.d(t,{ConfigurableExample:()=>B,FolderExample:()=>J,GeoJsonLayerExample:()=>N,LabelExample:()=>F,VectortileExample:()=>G,WmsLayerExample:()=>_,__namedExportsOrder:()=>T,default:()=>C});var r=n(96540),a=n(61224),o=n(30799),s=n(6182),i=n(25187);const l=JSON.parse('{"type":"Feature","properties":{"name":"path path path path path path path path"},"geometry":{"type":"LineString","coordinates":[[7.1074676513671875,50.74340774029213],[7.0992279052734375,50.756441089372665],[7.079315185546874,50.764693667025014],[7.045669555664062,50.77945780529241],[7.030563354492187,50.79161300845443],[7.0291900634765625,50.80940599750376],[7.0236968994140625,50.820685846099174],[7.0085906982421875,50.825891011253546],[6.9879913330078125,50.826758482363275],[6.97906494140625,50.835432306955276],[6.9824981689453125,50.84583876895451],[6.9962310791015625,50.85147463352982],[7.012023925781249,50.85710981721644],[7.021636962890625,50.86664473085768],[7.0367431640625,50.872278081520406],[7.0477294921875,50.877044231111014],[7.052536010742187,50.88397594225127]]}}'),u=JSON.parse('{"type":"Feature","properties":{},"geometry":{"type":"LineString","coordinates":[[7.0635223388671875,50.71385204707258],[7.06146240234375,50.709721458354075],[7.063865661621094,50.70298129536074],[7.064552307128906,50.69906720767511],[7.059059143066406,50.69428287906098],[7.05596923828125,50.68797551838366],[7.0580291748046875,50.680797145321655],[7.062835693359375,50.67514068397085],[7.060432434082031,50.6686131506577],[7.051849365234375,50.659255436656736],[7.044639587402344,50.6512019574539],[7.0484161376953125,50.64271166020676],[7.0566558837890625,50.63748609931014]]}}');var p=n(96204);const y=JSON.parse('{"type":"FeatureCollection","features":[{"type":"Feature","geometry":{"type":"Point","coordinates":[7.065242883489901,50.76377849881001]},"properties":{"name":"Point 1"}},{"type":"Feature","geometry":{"type":"Point","coordinates":[7.07706112344971,50.760233423956294]},"properties":{"name":"Point 2"}}]}');var c=n(61102),m=n(77070),b=n(49950),d=n(73641),S=n(36852),f=n(4748),L=n(67684),g=n(74848);function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function O(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){var r,a,o,s;r=e,a=t,o=n[t],s=function(e,t){if("object"!=v(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=v(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(a),(a="symbol"==v(s)?s:String(s))in r?Object.defineProperty(r,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[a]=o})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function x(e){return function(e){if(Array.isArray(e))return w(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||A(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,o,s,i=[],l=!0,u=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(i.push(r.value),i.length!==t);l=!0);}catch(e){u=!0,a=e}finally{try{if(!l&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(u)throw a}}return i}}(e,t)||A(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function A(e,t){if(e){if("string"==typeof e)return w(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?w(e,t):void 0}}function w(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const C={title:"UiComponents/LayerList",component:o.A,argTypes:{},decorators:d.A};var J=function(){var e=h((0,r.useState)(!0),2),t=e[0],n=e[1];return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)(c.A,{unmovableButtons:(0,g.jsx)(a.A,{variant:t?"contained":"outlined",onClick:function(){return n(!t)},children:"Sidebar"})}),(0,g.jsx)(m.A,{open:t,setOpen:n,name:"Layers",children:(0,g.jsx)(o.A,{children:(0,g.jsxs)(i.A,{visible:!0,name:"GeoJSON Layers",children:[(0,g.jsx)(s.A,{layerComponent:(0,g.jsx)(S.A,{geojson:l}),visible:!0,configurable:!1,type:"layer",name:"GeoJSON Layer"},"GeoJSONLayer"),(0,g.jsx)(s.A,{layerComponent:(0,g.jsx)(S.A,{geojson:u}),visible:!0,configurable:!0,type:"layer",name:"GeoJSON Layer 2",description:"A visualization of a GeoJSON LineString"},"GeoJSONLayer2")]})})})]})}.bind({});J.parameters={},J.args={};var G=function(){var e=h((0,r.useState)(!0),2),t=e[0],n=e[1],i=h((0,r.useState)({layerId:"openmaptiles",sourceOptions:{type:"vector",tiles:["https://wms.wheregroup.com/tileserver/tile/world-0-14/{z}/{x}/{y}.pbf"]},layers:x(b.A.layers)}),2),l=i[0],u=i[1];return(0,r.useEffect)((function(){console.log(l)}),[l]),(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)(c.A,{unmovableButtons:(0,g.jsx)(a.A,{variant:t?"contained":"outlined",onClick:function(){return n(!t)},children:"Sidebar"})}),(0,g.jsx)(m.A,{open:t,setOpen:n,name:"Vector Tile Layer",children:(0,g.jsx)(o.A,{children:(0,g.jsx)(s.A,{layerComponent:(0,g.jsx)(L.A,O({},l)),setLayerState:u,visible:!0,configurable:!1,type:"layer",name:"Vector style"})})})]})}.bind({});G.parameters={},G.args={};var _=function(){var e=h((0,r.useState)(!0),2),t=e[0],n=e[1],i=h((0,r.useState)({layerId:"openmaptiles",sourceOptions:{type:"vector",tiles:["https://wms.wheregroup.com/tileserver/tile/world-0-14/{z}/{x}/{y}.pbf"]},layers:x(b.A.layers)}),2),l=i[0],u=i[1];return(0,r.useEffect)((function(){console.log(l)}),[l]),(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)(c.A,{unmovableButtons:(0,g.jsx)(a.A,{variant:t?"contained":"outlined",onClick:function(){return n(!t)},children:"Sidebar"})}),(0,g.jsx)(m.A,{open:t,setOpen:n,name:"Layer List",children:(0,g.jsx)(o.A,{children:(0,g.jsx)(s.A,{layerComponent:(0,g.jsx)(f.A,{url:"https://www.wms.nrw.de/geobasis/wms_nw_uraufnahme",urlParameters:{layers:"nw_uraufnahme_rw"}}),setLayerState:u,visible:!0,configurable:!1,type:"layer",name:"WMS Layer"})})})]})}.bind({});_.parameters={},_.args={};var N=function(){var e=h((0,r.useState)(!0),2),t=e[0],n=e[1];return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)(c.A,{unmovableButtons:(0,g.jsx)(a.A,{variant:t?"contained":"outlined",onClick:function(){return n(!t)},children:"Sidebar"})}),(0,g.jsx)(m.A,{open:t,setOpen:n,name:"Layers",children:(0,g.jsxs)(o.A,{children:[(0,g.jsx)(s.A,{layerComponent:(0,g.jsx)(S.A,{geojson:y}),visible:!0,configurable:!0,type:"layer",name:"Point GeoJSON Layer"}),(0,g.jsx)(s.A,{layerComponent:(0,g.jsx)(S.A,{geojson:l}),visible:!0,configurable:!0,type:"layer",name:"Line GeoJSON Layer"}),(0,g.jsx)(s.A,{layerComponent:(0,g.jsx)(S.A,{geojson:p}),visible:!0,configurable:!0,type:"layer",name:"Polygon GeoJSON Layer"})]})})]})}.bind({});N.parameters={},N.args={};var B=function(){var e=h((0,r.useState)({geojson:l}),2),t=e[0],n=e[1],i=h((0,r.useState)({geojson:u}),2),p=i[0],y=i[1],b=h((0,r.useState)(!0),2),d=b[0],f=b[1];return(0,r.useEffect)((function(){console.log(t,p)}),[t,p]),(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)(c.A,{unmovableButtons:(0,g.jsx)(a.A,{variant:d?"contained":"outlined",onClick:function(){return f(!d)},children:"Sidebar"})}),(0,g.jsx)(m.A,{open:d,setOpen:f,name:"Layers",children:(0,g.jsxs)(o.A,{children:[(0,g.jsx)(s.A,{layerComponent:(0,g.jsx)(S.A,O({},t)),setLayerState:n,visible:!0,configurable:!0,type:"layer",name:"GeoJSON Layer"}),(0,g.jsx)(s.A,{layerComponent:(0,g.jsx)(S.A,O({},p)),setLayerState:y,visible:!0,configurable:!0,type:"layer",name:"configurable GeoJSON Layer",description:"A visualization of a GeoJSON LineString"})]})})]})}.bind({});B.parameters={},B.args={};var F=function(){var e=h((0,r.useState)({geojson:l,type:"symbol",options:{layout:{"symbol-placement":"line","text-field":"{name}","text-justify":"auto","text-font":["Open Sans Regular"]},paint:{"text-color":"white"}}}),2),t=e[0],n=e[1],i=h((0,r.useState)(!0),2),u=i[0],p=i[1];return(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)(c.A,{unmovableButtons:(0,g.jsx)(a.A,{variant:u?"contained":"outlined",onClick:function(){return p(!u)},children:"Sidebar"})}),(0,g.jsx)(m.A,{open:u,setOpen:p,name:"Layers",children:(0,g.jsx)(o.A,{children:(0,g.jsx)(s.A,{layerComponent:(0,g.jsx)(S.A,O({},t)),setLayerState:n,visible:!0,configurable:!0,type:"layer",name:"GeoJSON Layer"})})})]})}.bind({});F.parameters={},F.args={},J.parameters={...J.parameters,docs:{...J.parameters?.docs,source:{originalSource:'() => {\n  const [openSidebar, setOpenSidebar] = useState(true);\n  return <>\n            <TopToolbar unmovableButtons={<Button variant={openSidebar ? \'contained\' : \'outlined\'} onClick={() => setOpenSidebar(!openSidebar)}>\n                        Sidebar\n                    </Button>} />\n            <Sidebar open={openSidebar} setOpen={setOpenSidebar} name={\'Layers\'}>\n                <LayerList>\n                    <LayerListFolder visible={true} name={\'GeoJSON Layers\'}>\n                        <LayerListItem layerComponent={<MlGeoJsonLayer geojson={(sample_geojson_1 as Feature)} />} visible={true} configurable={false} type="layer" name="GeoJSON Layer" key="GeoJSONLayer" />\n                        <LayerListItem layerComponent={<MlGeoJsonLayer geojson={(sample_geojson_2 as Feature)} />} visible={true} configurable={true} type="layer" name="GeoJSON Layer 2" description="A visualization of a GeoJSON LineString" key="GeoJSONLayer2" />\n                    </LayerListFolder>\n                </LayerList>\n            </Sidebar>\n        </>;\n}',...J.parameters?.docs?.source}}},G.parameters={...G.parameters,docs:{...G.parameters?.docs,source:{originalSource:"() => {\n  const [openSidebar, setOpenSidebar] = useState(true);\n  const [layerState, setLayerState] = useState({\n    layerId: 'openmaptiles',\n    sourceOptions: {\n      type: ('vector' as const),\n      tiles: ['https://wms.wheregroup.com/tileserver/tile/world-0-14/{z}/{x}/{y}.pbf']\n    },\n    layers: ([...style.layers] as LayerSpecification[])\n  });\n  useEffect(() => {\n    console.log(layerState);\n  }, [layerState]);\n  return <>\n            <TopToolbar unmovableButtons={<Button variant={openSidebar ? 'contained' : 'outlined'} onClick={() => setOpenSidebar(!openSidebar)}>\n                        Sidebar\n                    </Button>} />\n            <Sidebar open={openSidebar} setOpen={setOpenSidebar} name={'Vector Tile Layer'}>\n                <LayerList>\n                    <LayerListItem layerComponent={<MlVectorTileLayer {...layerState} />} setLayerState={setLayerState} visible={true} configurable={false} type=\"layer\" name=\"Vector style\" />\n                </LayerList>\n            </Sidebar>\n        </>;\n}",...G.parameters?.docs?.source}}},_.parameters={..._.parameters,docs:{..._.parameters?.docs,source:{originalSource:"() => {\n  const [openSidebar, setOpenSidebar] = useState(true);\n  const [layerState, setLayerState] = useState({\n    layerId: 'openmaptiles',\n    sourceOptions: {\n      type: ('vector' as const),\n      tiles: ['https://wms.wheregroup.com/tileserver/tile/world-0-14/{z}/{x}/{y}.pbf']\n    },\n    layers: ([...style.layers] as LayerSpecification[])\n  });\n  useEffect(() => {\n    console.log(layerState);\n  }, [layerState]);\n  return <>\n            <TopToolbar unmovableButtons={<Button variant={openSidebar ? 'contained' : 'outlined'} onClick={() => setOpenSidebar(!openSidebar)}>\n                        Sidebar\n                    </Button>} />\n            <Sidebar open={openSidebar} setOpen={setOpenSidebar} name={'Layer List'}>\n                <LayerList>\n                    <LayerListItem layerComponent={<MlWmsLayer url=\"https://www.wms.nrw.de/geobasis/wms_nw_uraufnahme\" urlParameters={{\n          layers: 'nw_uraufnahme_rw'\n        }} />} setLayerState={setLayerState} visible={true} configurable={false} type=\"layer\" name=\"WMS Layer\" />\n                </LayerList>\n            </Sidebar>\n        </>;\n}",..._.parameters?.docs?.source}}},N.parameters={...N.parameters,docs:{...N.parameters?.docs,source:{originalSource:'() => {\n  const [openSidebar, setOpenSidebar] = useState(true);\n  return <>\n            <TopToolbar unmovableButtons={<Button variant={openSidebar ? \'contained\' : \'outlined\'} onClick={() => setOpenSidebar(!openSidebar)}>\n                        Sidebar\n                    </Button>} />\n            <Sidebar open={openSidebar} setOpen={setOpenSidebar} name={\'Layers\'}>\n                <LayerList>\n                    <LayerListItem layerComponent={<MlGeoJsonLayer geojson={(sample_geojson_points as FeatureCollection)} />} visible={true} configurable={true} type="layer" name="Point GeoJSON Layer" />\n                    <LayerListItem layerComponent={<MlGeoJsonLayer geojson={(sample_geojson_1 as Feature)} />} visible={true} configurable={true} type="layer" name="Line GeoJSON Layer" />\n                    <LayerListItem layerComponent={<MlGeoJsonLayer geojson={(sample_geojson_polygon as FeatureCollection)} />} visible={true} configurable={true} type="layer" name="Polygon GeoJSON Layer" />\n                </LayerList>\n            </Sidebar>\n        </>;\n}',...N.parameters?.docs?.source}}},B.parameters={...B.parameters,docs:{...B.parameters?.docs,source:{originalSource:'() => {\n  const [layerOneState, setLayerOneState] = useState({\n    geojson: (sample_geojson_1 as Feature)\n  });\n  const [layerTwoState, setLayerTwoState] = useState({\n    geojson: (sample_geojson_2 as Feature)\n  });\n  const [openSidebar, setOpenSidebar] = useState(true);\n  useEffect(() => {\n    console.log(layerOneState, layerTwoState);\n  }, [layerOneState, layerTwoState]);\n  return <>\n            <TopToolbar unmovableButtons={<Button variant={openSidebar ? \'contained\' : \'outlined\'} onClick={() => setOpenSidebar(!openSidebar)}>\n                        Sidebar\n                    </Button>} />\n            <Sidebar open={openSidebar} setOpen={setOpenSidebar} name={\'Layers\'}>\n                <LayerList>\n                    <LayerListItem layerComponent={<MlGeoJsonLayer {...layerOneState} />} setLayerState={setLayerOneState} visible={true} configurable={true} type="layer" name="GeoJSON Layer" />\n                    <LayerListItem layerComponent={<MlGeoJsonLayer {...layerTwoState} />} setLayerState={setLayerTwoState} visible={true} configurable={true} type="layer" name="configurable GeoJSON Layer" description="A visualization of a GeoJSON LineString" />\n                </LayerList>\n            </Sidebar>\n        </>;\n}',...B.parameters?.docs?.source}}},F.parameters={...F.parameters,docs:{...F.parameters?.docs,source:{originalSource:"() => {\n  const [layerOneState, setLayerOneState] = useState({\n    geojson: (sample_geojson_1 as Feature),\n    type: ('symbol' as const),\n    options: {\n      layout: {\n        'symbol-placement': 'line',\n        'text-field': '{name}',\n        'text-justify': 'auto',\n        'text-font': ['Open Sans Regular']\n      },\n      paint: {\n        'text-color': 'white'\n      }\n    }\n  });\n  const [openSidebar, setOpenSidebar] = useState(true);\n  return <>\n            <TopToolbar unmovableButtons={<Button variant={openSidebar ? 'contained' : 'outlined'} onClick={() => setOpenSidebar(!openSidebar)}>\n                        Sidebar\n                    </Button>} />\n            <Sidebar open={openSidebar} setOpen={setOpenSidebar} name={'Layers'}>\n                <LayerList>\n                    <LayerListItem layerComponent={<MlGeoJsonLayer {...(layerOneState as MlGeoJsonLayerProps)} />} setLayerState={setLayerOneState} visible={true} configurable={true} type=\"layer\" name=\"GeoJSON Layer\" />\n                </LayerList>\n            </Sidebar>\n        </>;\n}",...F.parameters?.docs?.source}}};const T=["FolderExample","VectortileExample","WmsLayerExample","GeoJsonLayerExample","ConfigurableExample","LabelExample"]},73641:(e,t,n)=>{n.d(t,{A:()=>p});var r=n(96540),a=n(95532),o=n(32348),s=(n(18582),n(68704)),i=n(70008),l=n(30901),u=n(74848);const p=[function(e,t){var n,p=(0,r.useMemo)((function(){var e;return(0,l.A)(null==t||null===(e=t.globals)||void 0===e?void 0:e.theme)}),[null==t||null===(n=t.globals)||void 0===n?void 0:n.theme]);return(0,u.jsx)("div",{className:"fullscreen_map",children:(0,u.jsx)(a.mO,{children:(0,u.jsxs)(i.A,{theme:p,children:[(0,u.jsx)(e,{}),(0,u.jsx)(o.A,{mapId:"map_1",options:{zoom:12.5,center:[7.0851268,50.73884]}}),(0,u.jsx)(s.A,{showZoomButtons:!1,mapId:"map_1"})]})})})}]},96204:e=>{e.exports=JSON.parse('{"type":"FeatureCollection","features":[{"type":"Feature","properties":{},"geometry":{"coordinates":[[[7.08646747303149,50.74485058672653],[7.084287513691095,50.74371917250187],[7.084437772332876,50.743610683782215],[7.084640903561933,50.743721758552354],[7.085805654941254,50.74293993704128],[7.087023278906713,50.74218320888983],[7.087791368229503,50.74258090834434],[7.088796806075749,50.743261830692745],[7.089275088452752,50.743701110992674],[7.088087117762917,50.74409411011173],[7.087662548338368,50.743784963165815],[7.087184330538875,50.7440368518605],[7.087233860417484,50.744077781245316],[7.08714938625954,50.744122118772154],[7.087057544749172,50.74427276821896],[7.087104984084277,50.744509715654885],[7.08646747303149,50.74485058672653]]],"type":"Polygon"}}]}')}}]);